;(function() {
	if (window.WebViewJavascriptBridge) {
		return;
	}

	if (!window.onerror) {
		window.onerror = function(msg, url, line) {
			console.log("WebViewJavascriptBridge: ERROR:" + msg + "@" + url + ":" + line);
		}
	}
	window.WebViewJavascriptBridge = {
		init: init,
		registerHandler: registerHandler,
		callHandler: callHandler,
		disableJavscriptAlertBoxSafetyTimeout: disableJavscriptAlertBoxSafetyTimeout,
		_fetchQueue: _fetchQueue,
		_handleMessageFromObjC: _handleMessageFromObjC
	};

	var messagingIframe;
	var sendMessageQueue = [];
	var messageHandlers = {};
	
	var CUSTOM_PROTOCOL_SCHEME = 'egamescheme';
	var QUEUE_HAS_MESSAGE = '__EGAME_QUEUE_MESSAGE__';
	
	var responseCallbacks = {};
	var uniqueId = 1;
	var dispatchMessagesWithTimeoutSafety = true;

	function registerHandler(handlerName, handler) {
		messageHandlers[handlerName] = handler;
	}
	
	function callHandler(handlerName, data, responseCallback) {
		if (arguments.length == 2 && typeof data == 'function') {
			responseCallback = data;
			data = null;
		}
		_doSend({ handlerName:handlerName, data:data }, responseCallback);
	}

	function callSyncHandler(handlerName,data){

	    return result
	}

	function disableJavscriptAlertBoxSafetyTimeout() {
		dispatchMessagesWithTimeoutSafety = false;
	}

	function init(messageHandler) {
		alert('init ')
    		if (WebViewJavascriptBridge._messageHandler) { throw new Error('WebViewJavascriptBridge.init called twice') }
    		WebViewJavascriptBridge._messageHandler = messageHandler
    		var receivedMessages = receiveMessageQueue
    		receiveMessageQueue = null
    		for (var i=0; i<receivedMessages.length; i++) {
    			_dispatchMessageFromObjC(receivedMessages[i])
    		}
    	}

    function send(data, responseCallback) {
    	_doSend({ data:data }, responseCallback)
    }
	function _doSend(message, responseCallback) {
		if (responseCallback) {
			var callbackId = 'cb_'+(uniqueId++)+'_'+new Date().getTime();
			responseCallbacks[callbackId] = responseCallback;
			message['callbackId'] = callbackId;
		}
		sendMessageQueue.push(message);
		messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
	}

	function _fetchQueue() {
		var messageQueueString = JSON.stringify(sendMessageQueue);
		sendMessageQueue = [];
		return messageQueueString;
	}

	function _dispatchMessageFromObjC(messageJSON) {
		if (dispatchMessagesWithTimeoutSafety) {
			setTimeout(_doDispatchMessageFromObjC);
		} else {
			 _doDispatchMessageFromObjC();
		}
		
		function _doDispatchMessageFromObjC() {
			var message = JSON.parse(messageJSON);
			var messageHandler;
			var responseCallback;

			if (message.responseId) {
				responseCallback = responseCallbacks[message.responseId];
				if (!responseCallback) {
					return;
				}
				responseCallback(message.responseData);
				delete responseCallbacks[message.responseId];
			} else {
				if (message.callbackId) {
					var callbackResponseId = message.callbackId;
					responseCallback = function(responseData) {
						_doSend({ handlerName:message.handlerName, responseId:callbackResponseId, responseData:responseData });
					};
				}

				var handler = WebViewJavascriptBridge._messageHandler
                				if (message.handlerName) {
                					handler = messageHandlers[message.handlerName]
                				}

                				try {
                					handler(message.data, responseCallback)
                				} catch(exception) {
                					if (typeof console != 'undefined') {
                						console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception)
                					}
                				}
				

			}
		}
	}
	
	function _handleMessageFromObjC(messageJSON) {
        _dispatchMessageFromObjC(messageJSON);
	}

	function _synDispatchMessageFromObjC(messageJSON) {
    	    var message = JSON.parse(messageJSON)
    	    var messageHandler

    	    var handler
    	    if (message.handlerName) {
    	        handler = synMessageHandlers[message.handlerName]
    	    }
    	    else
    	    {
    	    	return "{\"isSuccess\":false, \"message\": \"handlerName is null\"}"
    	    }

    	    try {
    	        return handler(message.data)
    	    } catch(exception) {
    	        if (typeof console != 'undefined') {
    	            console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception)
    	        }
    	    }
    }

	messagingIframe = document.createElement('iframe');
	messagingIframe.style.display = 'none';
	messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
	document.documentElement.appendChild(messagingIframe);

	registerHandler("_disableJavascriptAlertBoxSafetyTimeout", disableJavscriptAlertBoxSafetyTimeout);
	
	setTimeout(_callEGAMECallbacks, 0);
	function _callEGAMECallbacks() {
		var callbacks = window.EGAMECallbacks;
		delete window.EGAMECallbacks;
		for (var i=0; i<callbacks.length; i++) {
			callbacks[i](WebViewJavascriptBridge);
		}
	}
})();